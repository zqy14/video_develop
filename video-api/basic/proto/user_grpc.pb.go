// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.19.4
// source: user.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	User_SendSmsCode_FullMethodName            = "/proto.User/SendSmsCode"
	User_PhoneLogin_FullMethodName             = "/proto.User/PhoneLogin"
	User_VideoWorks_FullMethodName             = "/proto.User/VideoWorks"
	User_VideoList_FullMethodName              = "/proto.User/VideoList"
	User_UpdateVideoWorkComment_FullMethodName = "/proto.User/UpdateVideoWorkComment"
	User_DeleteVideoWorkComment_FullMethodName = "/proto.User/DeleteVideoWorkComment"
	User_ListVideoWorkComment_FullMethodName   = "/proto.User/ListVideoWorkComment"
	User_AddVideoWorkComment_FullMethodName    = "/proto.User/AddVideoWorkComment"
	User_AnthorCheck_FullMethodName            = "/proto.User/AnthorCheck"
)

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	// 发送手机验证码
	SendSmsCode(ctx context.Context, in *SendSmsCodeRequest, opts ...grpc.CallOption) (*SendSmsCodeResponse, error)
	// 手机号登录/注册
	PhoneLogin(ctx context.Context, in *PhoneLoginRequest, opts ...grpc.CallOption) (*PhoneLoginResponse, error)
	// 作品添加
	VideoWorks(ctx context.Context, in *VideoWorksRequest, opts ...grpc.CallOption) (*VideoWorksResponse, error)
	// 作品展示
	VideoList(ctx context.Context, in *VideoListRequest, opts ...grpc.CallOption) (*VideoListResponse, error)
	// 评论更新
	UpdateVideoWorkComment(ctx context.Context, in *UpdateVideoWorkCommentRequest, opts ...grpc.CallOption) (*UpdateVideoWorkCommentResponse, error)
	// 评论删除
	DeleteVideoWorkComment(ctx context.Context, in *DeleteVideoWorkCommentRequest, opts ...grpc.CallOption) (*DeleteVideoWorkCommentResponse, error)
	// 评论展示
	ListVideoWorkComment(ctx context.Context, in *ListVideoWorkCommentRequest, opts ...grpc.CallOption) (*ListVideoWorkCommentResponse, error)
	// 评论发布
	AddVideoWorkComment(ctx context.Context, in *AddVideoWorkCommentRequest, opts ...grpc.CallOption) (*AddVideoWorkCommentResponse, error)
	// 审核
	AnthorCheck(ctx context.Context, in *AnthorCheckRequest, opts ...grpc.CallOption) (*AnthorCheckResponse, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) SendSmsCode(ctx context.Context, in *SendSmsCodeRequest, opts ...grpc.CallOption) (*SendSmsCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendSmsCodeResponse)
	err := c.cc.Invoke(ctx, User_SendSmsCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) PhoneLogin(ctx context.Context, in *PhoneLoginRequest, opts ...grpc.CallOption) (*PhoneLoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PhoneLoginResponse)
	err := c.cc.Invoke(ctx, User_PhoneLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) VideoWorks(ctx context.Context, in *VideoWorksRequest, opts ...grpc.CallOption) (*VideoWorksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VideoWorksResponse)
	err := c.cc.Invoke(ctx, User_VideoWorks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) VideoList(ctx context.Context, in *VideoListRequest, opts ...grpc.CallOption) (*VideoListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VideoListResponse)
	err := c.cc.Invoke(ctx, User_VideoList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateVideoWorkComment(ctx context.Context, in *UpdateVideoWorkCommentRequest, opts ...grpc.CallOption) (*UpdateVideoWorkCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateVideoWorkCommentResponse)
	err := c.cc.Invoke(ctx, User_UpdateVideoWorkComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DeleteVideoWorkComment(ctx context.Context, in *DeleteVideoWorkCommentRequest, opts ...grpc.CallOption) (*DeleteVideoWorkCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteVideoWorkCommentResponse)
	err := c.cc.Invoke(ctx, User_DeleteVideoWorkComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ListVideoWorkComment(ctx context.Context, in *ListVideoWorkCommentRequest, opts ...grpc.CallOption) (*ListVideoWorkCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVideoWorkCommentResponse)
	err := c.cc.Invoke(ctx, User_ListVideoWorkComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AddVideoWorkComment(ctx context.Context, in *AddVideoWorkCommentRequest, opts ...grpc.CallOption) (*AddVideoWorkCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddVideoWorkCommentResponse)
	err := c.cc.Invoke(ctx, User_AddVideoWorkComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AnthorCheck(ctx context.Context, in *AnthorCheckRequest, opts ...grpc.CallOption) (*AnthorCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnthorCheckResponse)
	err := c.cc.Invoke(ctx, User_AnthorCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	// 发送手机验证码
	SendSmsCode(context.Context, *SendSmsCodeRequest) (*SendSmsCodeResponse, error)
	// 手机号登录/注册
	PhoneLogin(context.Context, *PhoneLoginRequest) (*PhoneLoginResponse, error)
	// 作品添加
	VideoWorks(context.Context, *VideoWorksRequest) (*VideoWorksResponse, error)
	// 作品展示
	VideoList(context.Context, *VideoListRequest) (*VideoListResponse, error)
	// 评论更新
	UpdateVideoWorkComment(context.Context, *UpdateVideoWorkCommentRequest) (*UpdateVideoWorkCommentResponse, error)
	// 评论删除
	DeleteVideoWorkComment(context.Context, *DeleteVideoWorkCommentRequest) (*DeleteVideoWorkCommentResponse, error)
	// 评论展示
	ListVideoWorkComment(context.Context, *ListVideoWorkCommentRequest) (*ListVideoWorkCommentResponse, error)
	// 评论发布
	AddVideoWorkComment(context.Context, *AddVideoWorkCommentRequest) (*AddVideoWorkCommentResponse, error)
	// 审核
	AnthorCheck(context.Context, *AnthorCheckRequest) (*AnthorCheckResponse, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) SendSmsCode(context.Context, *SendSmsCodeRequest) (*SendSmsCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSmsCode not implemented")
}
func (UnimplementedUserServer) PhoneLogin(context.Context, *PhoneLoginRequest) (*PhoneLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneLogin not implemented")
}
func (UnimplementedUserServer) VideoWorks(context.Context, *VideoWorksRequest) (*VideoWorksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VideoWorks not implemented")
}
func (UnimplementedUserServer) VideoList(context.Context, *VideoListRequest) (*VideoListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VideoList not implemented")
}
func (UnimplementedUserServer) UpdateVideoWorkComment(context.Context, *UpdateVideoWorkCommentRequest) (*UpdateVideoWorkCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVideoWorkComment not implemented")
}
func (UnimplementedUserServer) DeleteVideoWorkComment(context.Context, *DeleteVideoWorkCommentRequest) (*DeleteVideoWorkCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVideoWorkComment not implemented")
}
func (UnimplementedUserServer) ListVideoWorkComment(context.Context, *ListVideoWorkCommentRequest) (*ListVideoWorkCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVideoWorkComment not implemented")
}
func (UnimplementedUserServer) AddVideoWorkComment(context.Context, *AddVideoWorkCommentRequest) (*AddVideoWorkCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVideoWorkComment not implemented")
}
func (UnimplementedUserServer) AnthorCheck(context.Context, *AnthorCheckRequest) (*AnthorCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnthorCheck not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_SendSmsCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSmsCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SendSmsCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_SendSmsCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SendSmsCode(ctx, req.(*SendSmsCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_PhoneLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhoneLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PhoneLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_PhoneLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PhoneLogin(ctx, req.(*PhoneLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_VideoWorks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoWorksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).VideoWorks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_VideoWorks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).VideoWorks(ctx, req.(*VideoWorksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_VideoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).VideoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_VideoList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).VideoList(ctx, req.(*VideoListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateVideoWorkComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVideoWorkCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateVideoWorkComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UpdateVideoWorkComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateVideoWorkComment(ctx, req.(*UpdateVideoWorkCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DeleteVideoWorkComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVideoWorkCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DeleteVideoWorkComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_DeleteVideoWorkComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DeleteVideoWorkComment(ctx, req.(*DeleteVideoWorkCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ListVideoWorkComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVideoWorkCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ListVideoWorkComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_ListVideoWorkComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ListVideoWorkComment(ctx, req.(*ListVideoWorkCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AddVideoWorkComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVideoWorkCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddVideoWorkComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_AddVideoWorkComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddVideoWorkComment(ctx, req.(*AddVideoWorkCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AnthorCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnthorCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AnthorCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_AnthorCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AnthorCheck(ctx, req.(*AnthorCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendSmsCode",
			Handler:    _User_SendSmsCode_Handler,
		},
		{
			MethodName: "PhoneLogin",
			Handler:    _User_PhoneLogin_Handler,
		},
		{
			MethodName: "VideoWorks",
			Handler:    _User_VideoWorks_Handler,
		},
		{
			MethodName: "VideoList",
			Handler:    _User_VideoList_Handler,
		},
		{
			MethodName: "UpdateVideoWorkComment",
			Handler:    _User_UpdateVideoWorkComment_Handler,
		},
		{
			MethodName: "DeleteVideoWorkComment",
			Handler:    _User_DeleteVideoWorkComment_Handler,
		},
		{
			MethodName: "ListVideoWorkComment",
			Handler:    _User_ListVideoWorkComment_Handler,
		},
		{
			MethodName: "AddVideoWorkComment",
			Handler:    _User_AddVideoWorkComment_Handler,
		},
		{
			MethodName: "AnthorCheck",
			Handler:    _User_AnthorCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

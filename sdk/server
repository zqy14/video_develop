 // 限流器配置
const (
	GlobalRateLimit = 100 // 全局限流100QPS
	IPRateLimit     = 5   // 单个IP每秒5次
	UserRateLimit   = 2   // 单个用户每秒2次
)

var (
	globalLimiter = ratelimit.New(GlobalRateLimit)
	ipLimiters    sync.Map
	userLimiters  sync.Map
)



// 1. 全局限流
	globalLimiter.Take()

	// 2. 获取客户端IP（需要根据实际框架实现）
	ip := getClientIP(ctx)

	// 3. IP级限流
	if limiter, ok := ipLimiters.Load(ip); ok {
		limiter.(ratelimit.Limiter).Take()
	} else {
		newLimiter := ratelimit.New(IPRateLimit)
		ipLimiters.Store(ip, newLimiter)
		newLimiter.Take()
	}

	// 4. 手机号格式校验
	if err := ValidateMobile(in.Mobile); err != nil {
		return &__.LoginRepine{
			Code: 400,
			Msg:  err.Error(),
		}, nil
	}
	// 5. 查询用户
	var user model.User
	if err := config.DB.Where("mobile = ?", in.Mobile).First(&user).Error; err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			return &__.LoginRepine{
				Code: 404,
				Msg:  "用户不存在",
			}, nil
		}
		return nil, err
	}
	// 6. 用户级限流
	if limiter, ok := userLimiters.Load(user.UserId); ok {
		limiter.(ratelimit.Limiter).Take()
	} else {
		newLimiter := ratelimit.New(UserRateLimit)
		userLimiters.Store(user.UserId, newLimiter)
		newLimiter.Take()
	}

// 获取客户端IP（示例实现）
func getClientIP(ctx context.Context) string {
	// 实际项目中根据框架获取真实IP
	// 例如从gRPC metadata或HTTP头中获取
	return "127.0.0.1" // 示例值
}

// 手机号校验
func ValidateMobile(mobile string) error {
	if len(mobile) != 11 {
		return errors.New("手机号必须为11位")
	}
	pattern := `^1[3-9]\d{9}$`
	matched, _ := regexp.MatchString(pattern, mobile)
	if !matched {
		return errors.New("手机号格式错误")
	}
	return nil
}

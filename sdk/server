 // 限流器配置
const (
	GlobalRateLimit = 100 // 全局限流100QPS
	IPRateLimit     = 5   // 单个IP每秒5次
	UserRateLimit   = 2   // 单个用户每秒2次
)

var (
	globalLimiter = ratelimit.New(GlobalRateLimit)
	ipLimiters    sync.Map
	userLimiters  sync.Map
)



// 1. 全局限流
	globalLimiter.Take()

	// 2. 获取客户端IP（需要根据实际框架实现）
	ip := getClientIP(ctx)

	// 3. IP级限流
	if limiter, ok := ipLimiters.Load(ip); ok {
		limiter.(ratelimit.Limiter).Take()
	} else {
		newLimiter := ratelimit.New(IPRateLimit)
		ipLimiters.Store(ip, newLimiter)
		newLimiter.Take()
	}

	// 4. 手机号格式校验
	if err := ValidateMobile(in.Mobile); err != nil {
		return &__.LoginRepine{
			Code: 400,
			Msg:  err.Error(),
		}, nil
	}
	// 5. 查询用户
	var user model.User
	if err := config.DB.Where("mobile = ?", in.Mobile).First(&user).Error; err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			return &__.LoginRepine{
				Code: 404,
				Msg:  "用户不存在",
			}, nil
		}
		return nil, err
	}
	// 6. 用户级限流
	if limiter, ok := userLimiters.Load(user.UserId); ok {
		limiter.(ratelimit.Limiter).Take()
	} else {
		newLimiter := ratelimit.New(UserRateLimit)
		userLimiters.Store(user.UserId, newLimiter)
		newLimiter.Take()
	}

// 获取客户端IP（示例实现）
func getClientIP(ctx context.Context) string {
	// 实际项目中根据框架获取真实IP
	// 例如从gRPC metadata或HTTP头中获取
	return "127.0.0.1" // 示例值
}

// 手机号校验
func ValidateMobile(mobile string) error {
	if len(mobile) != 11 {
		return errors.New("手机号必须为11位")
	}
	pattern := `^1[3-9]\d{9}$`
	matched, _ := regexp.MatchString(pattern, mobile)
	if !matched {
		return errors.New("手机号格式错误")
	}
	return nil
}

// 按月统计uv，pv
//封装依赖包
import (
	"context"
	"errors"
	"fmt"
	"github.com/redis/go-redis/v9"
	"regexp"
	"selftest/user-rpc/basic/config"
	"selftest/user-rpc/handler/model"
	__ "selftest/user-rpc/proto"
	"time"
)
type StatsService struct {
	redis *redis.Client
}

func NewStatsService(redis *redis.Client) *StatsService {
	return &StatsService{redis: redis}
}

// RecordAccess 记录访问数据（PV+UV）
func (s *StatsService) RecordAccess(ctx context.Context, userID string) error {
	// 1. 获取当前月份（格式：YYYYMM）
	monthKey := time.Now().Format("200601")

	// 2. 记录PV（原子递增）
	pvKey := fmt.Sprintf("stats:pv:%s", monthKey)
	if err := s.redis.Incr(ctx, pvKey).Err(); err != nil {
		return fmt.Errorf("记录PV失败: %v", err)
	}

	// 3. 记录UV（HyperLogLog）
	uvKey := fmt.Sprintf("stats:uv:%s", monthKey)
	if err := s.redis.PFAdd(ctx, uvKey, userID).Err(); err != nil {
		return fmt.Errorf("记录UV失败: %v", err)
	}

	// 4. 记录用户访问日期（可选：用于精确去重）
	userAccessKey := fmt.Sprintf("user_access:%s:%s", monthKey, userID)
	if err := s.redis.SAdd(ctx, userAccessKey, time.Now().Format("02")).Err(); err != nil {
		return fmt.Errorf("记录用户访问日期失败: %v", err)
	}
	s.redis.Expire(ctx, userAccessKey, 32*24*time.Hour) // 设置过期时间略大于一个月

	return nil
}

// GetMonthlyStats 获取月度统计
func (s *StatsService) GetMonthlyStats(ctx context.Context, month string) (pv int64, uv int64, err error) {
	// 1. 获取PV
	pvKey := fmt.Sprintf("stats:pv:%s", month)
	pv, err = s.redis.Get(ctx, pvKey).Int64()
	if err == redis.Nil {
		pv = 0
	} else if err != nil {
		return 0, 0, fmt.Errorf("获取PV失败: %v", err)
	}

	// 2. 获取UV（HyperLogLog）
	uvKey := fmt.Sprintf("stats:uv:%s", month)
	uv, err = s.redis.PFCount(ctx, uvKey).Result()
	if err != nil {
		return 0, 0, fmt.Errorf("获取UV失败: %v", err)
	}

	return pv, uv, nil
}

// GetUserAccessDays 获取用户当月访问天数（精确统计）
func (s *StatsService) GetUserAccessDays(ctx context.Context, userID string) (int, error) {
	monthKey := time.Now().Format("200601")
	userAccessKey := fmt.Sprintf("user_access:%s:%s", monthKey, userID)
	return s.redis.SCard(ctx, userAccessKey).Result()
}


// 展示空闲科室
fmt.Println("===== 空闲科室列表 =====")
fmt.Printf("扫描时间: %s\n", now.Format("2006-01-02 15:04:05"))
fmt.Println("-----------------------")

if len(freeDepartments) == 0 {
	fmt.Println("当前没有空闲科室")
	return
}

//分页
var hospitals []model.Hospitals
var total int64

// 获取总数
if err := config.DB.Model(&model.Hospitals{}).Count(&total).Error; err != nil {
	return nil, err
}

// 计算分页参数
offset := (in.Page - 1) * in.Size

// 查询分页数据
err := config.DB.Offset(int(offset)).Limit(int(in.Size)).Find(&hospitals).Error
if err != nil {
	return nil, err
}


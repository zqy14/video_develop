// 创建消费者
package main

import (
	"context"
	"fmt"

	"github.com/apache/rocketmq-client-go/v2"
	"github.com/apache/rocketmq-client-go/v2/consumer"
	"github.com/apache/rocketmq-client-go/v2/primitive"
)

func main() {
	// 创建消费者
	c, err := rocketmq.NewPushConsumer(
		consumer.WithGroupName("delay_message_producer_group"),
		consumer.WithNameServer([]string{"14.103.243.153:9876"}),
	)
	if err != nil {
		fmt.Printf("Failed to create consumer: %s\n", err.Error())
		return
	}

	// 注册消息监听器
	err = c.Subscribe("test", consumer.MessageSelector{}, func(ctx context.Context, msgs ...*primitive.MessageExt) (consumer.ConsumeResult, error) {
		for _, msg := range msgs {
			fmt.Printf("Received message--------->-: %s\n", string(msg.Body))
		}
		return consumer.ConsumeSuccess, nil
	})
	if err != nil {
		fmt.Printf("Failed to subscribe to topic: %s\n", err.Error())
		return
	}

	// 启动消费者
	err = c.Start()
	if err != nil {
		fmt.Printf("Failed to start consumer: %s\n", err.Error())
		return
	}

	// 为了持续接收消息，让主线程阻塞
	select {}
}


// 创建生产者
package main

import (
	"context"
	"fmt"

	"github.com/apache/rocketmq-client-go/v2"
	"github.com/apache/rocketmq-client-go/v2/primitive"
	"github.com/apache/rocketmq-client-go/v2/producer"
)

func main() {
	// 创建生产者
	p, err := rocketmq.NewProducer(
		producer.WithNameServer([]string{"14.103.243.153:9876"}),
		producer.WithGroupName("delay_message_producer_group"),
	)
	if err != nil {
		fmt.Printf("Failed to create producer: %s\n", err.Error())
		return
	}

	// 启动生产者
	err = p.Start()
	if err != nil {
		fmt.Printf("Failed to start producer: %s\n", err.Error())
		return
	}

	// 创建消息
	msg := &primitive.Message{
		Topic: "test",
		Body:  []byte("--------------------------->Hello RocketMQ with delay"),
	}

	// 设置延时等级 (例如，延时等级3代表10秒后推送)
	// messageDelayLevel=1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h
	msg.WithDelayTimeLevel(3)

	// 发送消息
	res, err := p.SendSync(context.Background(), msg)
	if err != nil {
		fmt.Printf("Failed to send message: %s\n", err.Error())
	} else {
		fmt.Printf("Message sent successfully: result=%s\n", res.String())
	}

	// 关闭生产者
	err = p.Shutdown()
	if err != nil {
		fmt.Printf("Failed to shut down producer: %s\n", err.Error())
	}
}

